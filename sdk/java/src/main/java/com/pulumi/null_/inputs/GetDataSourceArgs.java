// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.null_.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDataSourceArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDataSourceArgs Empty = new GetDataSourceArgs();

    /**
     * If set, its literal value will be stored and returned. If not, its value defaults to `&#34;default&#34;`. This argument exists primarily for testing and has little practical use.
     * 
     */
    @Import(name="hasComputedDefault")
    private @Nullable Output<String> hasComputedDefault;

    /**
     * @return If set, its literal value will be stored and returned. If not, its value defaults to `&#34;default&#34;`. This argument exists primarily for testing and has little practical use.
     * 
     */
    public Optional<Output<String>> hasComputedDefault() {
        return Optional.ofNullable(this.hasComputedDefault);
    }

    /**
     * A map of arbitrary strings that is copied into the `outputs` attribute, and accessible directly for interpolation.
     * 
     */
    @Import(name="inputs")
    private @Nullable Output<Map<String,String>> inputs;

    /**
     * @return A map of arbitrary strings that is copied into the `outputs` attribute, and accessible directly for interpolation.
     * 
     */
    public Optional<Output<Map<String,String>>> inputs() {
        return Optional.ofNullable(this.inputs);
    }

    private GetDataSourceArgs() {}

    private GetDataSourceArgs(GetDataSourceArgs $) {
        this.hasComputedDefault = $.hasComputedDefault;
        this.inputs = $.inputs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDataSourceArgs $;

        public Builder() {
            $ = new GetDataSourceArgs();
        }

        public Builder(GetDataSourceArgs defaults) {
            $ = new GetDataSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hasComputedDefault If set, its literal value will be stored and returned. If not, its value defaults to `&#34;default&#34;`. This argument exists primarily for testing and has little practical use.
         * 
         * @return builder
         * 
         */
        public Builder hasComputedDefault(@Nullable Output<String> hasComputedDefault) {
            $.hasComputedDefault = hasComputedDefault;
            return this;
        }

        /**
         * @param hasComputedDefault If set, its literal value will be stored and returned. If not, its value defaults to `&#34;default&#34;`. This argument exists primarily for testing and has little practical use.
         * 
         * @return builder
         * 
         */
        public Builder hasComputedDefault(String hasComputedDefault) {
            return hasComputedDefault(Output.of(hasComputedDefault));
        }

        /**
         * @param inputs A map of arbitrary strings that is copied into the `outputs` attribute, and accessible directly for interpolation.
         * 
         * @return builder
         * 
         */
        public Builder inputs(@Nullable Output<Map<String,String>> inputs) {
            $.inputs = inputs;
            return this;
        }

        /**
         * @param inputs A map of arbitrary strings that is copied into the `outputs` attribute, and accessible directly for interpolation.
         * 
         * @return builder
         * 
         */
        public Builder inputs(Map<String,String> inputs) {
            return inputs(Output.of(inputs));
        }

        public GetDataSourceArgs build() {
            return $;
        }
    }

}
