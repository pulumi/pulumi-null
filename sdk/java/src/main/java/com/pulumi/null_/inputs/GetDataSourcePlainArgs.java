// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.null_.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDataSourcePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDataSourcePlainArgs Empty = new GetDataSourcePlainArgs();

    /**
     * If set, its literal value will be stored and returned. If not, its value defaults to `&#34;default&#34;`. This argument exists primarily for testing and has little practical use.
     * 
     */
    @Import(name="hasComputedDefault")
    private @Nullable String hasComputedDefault;

    /**
     * @return If set, its literal value will be stored and returned. If not, its value defaults to `&#34;default&#34;`. This argument exists primarily for testing and has little practical use.
     * 
     */
    public Optional<String> hasComputedDefault() {
        return Optional.ofNullable(this.hasComputedDefault);
    }

    /**
     * A map of arbitrary strings that is copied into the `outputs` attribute, and accessible directly for interpolation.
     * 
     */
    @Import(name="inputs")
    private @Nullable Map<String,String> inputs;

    /**
     * @return A map of arbitrary strings that is copied into the `outputs` attribute, and accessible directly for interpolation.
     * 
     */
    public Optional<Map<String,String>> inputs() {
        return Optional.ofNullable(this.inputs);
    }

    private GetDataSourcePlainArgs() {}

    private GetDataSourcePlainArgs(GetDataSourcePlainArgs $) {
        this.hasComputedDefault = $.hasComputedDefault;
        this.inputs = $.inputs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDataSourcePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDataSourcePlainArgs $;

        public Builder() {
            $ = new GetDataSourcePlainArgs();
        }

        public Builder(GetDataSourcePlainArgs defaults) {
            $ = new GetDataSourcePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hasComputedDefault If set, its literal value will be stored and returned. If not, its value defaults to `&#34;default&#34;`. This argument exists primarily for testing and has little practical use.
         * 
         * @return builder
         * 
         */
        public Builder hasComputedDefault(@Nullable String hasComputedDefault) {
            $.hasComputedDefault = hasComputedDefault;
            return this;
        }

        /**
         * @param inputs A map of arbitrary strings that is copied into the `outputs` attribute, and accessible directly for interpolation.
         * 
         * @return builder
         * 
         */
        public Builder inputs(@Nullable Map<String,String> inputs) {
            $.inputs = inputs;
            return this;
        }

        public GetDataSourcePlainArgs build() {
            return $;
        }
    }

}
