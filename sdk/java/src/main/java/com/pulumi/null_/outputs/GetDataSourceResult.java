// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.null_.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetDataSourceResult {
    /**
     * @return If set, its literal value will be stored and returned. If not, its value defaults to `&#34;default&#34;`. This argument exists primarily for testing and has little practical use.
     * 
     */
    private String hasComputedDefault;
    /**
     * @return This attribute is only present for some legacy compatibility issues and should not be used. It will be removed in a future version.
     * 
     * @deprecated
     * This attribute is only present for some legacy compatibility issues and should not be used. It will be removed in a future version.
     * 
     */
    @Deprecated /* This attribute is only present for some legacy compatibility issues and should not be used. It will be removed in a future version. */
    private String id;
    /**
     * @return A map of arbitrary strings that is copied into the `outputs` attribute, and accessible directly for interpolation.
     * 
     */
    private @Nullable Map<String,String> inputs;
    /**
     * @return After the data source is &#34;read&#34;, a copy of the `inputs` map.
     * 
     */
    private Map<String,String> outputs;
    private String random;

    private GetDataSourceResult() {}
    /**
     * @return If set, its literal value will be stored and returned. If not, its value defaults to `&#34;default&#34;`. This argument exists primarily for testing and has little practical use.
     * 
     */
    public String hasComputedDefault() {
        return this.hasComputedDefault;
    }
    /**
     * @return This attribute is only present for some legacy compatibility issues and should not be used. It will be removed in a future version.
     * 
     * @deprecated
     * This attribute is only present for some legacy compatibility issues and should not be used. It will be removed in a future version.
     * 
     */
    @Deprecated /* This attribute is only present for some legacy compatibility issues and should not be used. It will be removed in a future version. */
    public String id() {
        return this.id;
    }
    /**
     * @return A map of arbitrary strings that is copied into the `outputs` attribute, and accessible directly for interpolation.
     * 
     */
    public Map<String,String> inputs() {
        return this.inputs == null ? Map.of() : this.inputs;
    }
    /**
     * @return After the data source is &#34;read&#34;, a copy of the `inputs` map.
     * 
     */
    public Map<String,String> outputs() {
        return this.outputs;
    }
    public String random() {
        return this.random;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataSourceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String hasComputedDefault;
        private String id;
        private @Nullable Map<String,String> inputs;
        private Map<String,String> outputs;
        private String random;
        public Builder() {}
        public Builder(GetDataSourceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hasComputedDefault = defaults.hasComputedDefault;
    	      this.id = defaults.id;
    	      this.inputs = defaults.inputs;
    	      this.outputs = defaults.outputs;
    	      this.random = defaults.random;
        }

        @CustomType.Setter
        public Builder hasComputedDefault(String hasComputedDefault) {
            if (hasComputedDefault == null) {
              throw new MissingRequiredPropertyException("GetDataSourceResult", "hasComputedDefault");
            }
            this.hasComputedDefault = hasComputedDefault;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDataSourceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inputs(@Nullable Map<String,String> inputs) {

            this.inputs = inputs;
            return this;
        }
        @CustomType.Setter
        public Builder outputs(Map<String,String> outputs) {
            if (outputs == null) {
              throw new MissingRequiredPropertyException("GetDataSourceResult", "outputs");
            }
            this.outputs = outputs;
            return this;
        }
        @CustomType.Setter
        public Builder random(String random) {
            if (random == null) {
              throw new MissingRequiredPropertyException("GetDataSourceResult", "random");
            }
            this.random = random;
            return this;
        }
        public GetDataSourceResult build() {
            final var _resultValue = new GetDataSourceResult();
            _resultValue.hasComputedDefault = hasComputedDefault;
            _resultValue.id = id;
            _resultValue.inputs = inputs;
            _resultValue.outputs = outputs;
            _resultValue.random = random;
            return _resultValue;
        }
    }
}
