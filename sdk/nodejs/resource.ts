// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as _null from "@pulumi/null";
 * import * as aws from "@pulumi/aws";
 * import * as std from "@pulumi/std";
 *
 * const cluster: aws.index.Instance[] = [];
 * for (const range = {value: 0}; range.value < 3; range.value++) {
 *     cluster.push(new aws.index.Instance(`cluster-${range.value}`, {
 *         ami: "ami-0dcc1e21636832c5d",
 *         instanceType: "m5.large",
 *     }));
 * }
 * // The primary use-case for the null resource is as a do-nothing container
 * // for arbitrary actions taken by a provisioner.
 * //
 * // In this example, three EC2 instances are created and then a
 * // null_resource instance is used to gather data about all three
 * // and execute a single action that affects them all. Due to the triggers
 * // map, the null_resource will be replaced each time the instance ids
 * // change, and thus the remote-exec provisioner will be re-run.
 * const clusterResource = new _null.Resource("cluster", {triggers: {
 *     cluster_instance_ids: std.join({
 *         separator: ",",
 *         input: cluster.map(__item => __item.id),
 *     }).then(invoke => invoke.result),
 * }});
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class Resource extends pulumi.CustomResource {
    /**
     * Get an existing Resource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceState, opts?: pulumi.CustomResourceOptions): Resource {
        return new Resource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'null:index/resource:Resource';

    /**
     * Returns true if the given object is an instance of Resource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Resource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Resource.__pulumiType;
    }

    /**
     * A map of arbitrary strings that, when changed, will force the null resource to be replaced, re-running any associated provisioners.
     */
    public readonly triggers!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Resource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceArgs | ResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceState | undefined;
            resourceInputs["triggers"] = state ? state.triggers : undefined;
        } else {
            const args = argsOrState as ResourceArgs | undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Resource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Resource resources.
 */
export interface ResourceState {
    /**
     * A map of arbitrary strings that, when changed, will force the null resource to be replaced, re-running any associated provisioners.
     */
    triggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Resource resource.
 */
export interface ResourceArgs {
    /**
     * A map of arbitrary strings that, when changed, will force the null resource to be replaced, re-running any associated provisioners.
     */
    triggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
